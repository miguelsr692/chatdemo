#!/usr/bin/env node

// Module dependencies.
var app = require('../app');
var debug = require('debug')('chatdemo:server');
var http = require('http');
const { type } = require('os');

// Get port from environment and store in Express.
var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

// Create HTTP server.
var server = http.createServer(app);
var io = require('socket.io')(server);

let vetor = []
io.on('connection', function (socket) {
  console.log('a user connected');

  socket.on('chat message', async function (input) {

    if (input != "fim") {
      input = JSON.parse(input);
      for (var i in input) {
        vetor.push(input[i]);
      }
    } else {
      //console.log(vetor);

      try {

        for (i = 0; i < vetor.length; i++) {
          const font = vetor[i][0];
          const x = vetor[i][1];
          const y = vetor[i][2];
          const z = vetor[i][3];
          const TimeStamp = vetor[i][4];
          //const NewTimeStamp = input[i].NewTimeStamp - ;
          //const Delay = input[i].Delay;

          const db = require("../db");
          const Dado = db.Mongoose.model('dados', db.MedicaoSchema, 'dados');
          const dado = Dado.create({ medicao: { font, x, y, z, TimeStamp } });

          //var num = await Dado.collection.countDocuments();
        }

        console.log('Ok!');
        io.emit('chat message', 'Dados salvos');
        vetor = [];
      } catch (erro) {
        console.log(erro);
      }
    }
  });

  socket.on('disconnect', function () {
    console.log('user disconnected');
  });
});

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? ('Pipe ' + port) : ('Port ' + port);

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event.
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
