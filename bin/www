#!/usr/bin/env node

// Module dependencies.
var app = require('../app');
var debug = require('debug')('chatdemo:server');
var http = require('http');
const { type } = require('os');


// Get port from environment and store in Express.
var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

// Create HTTP server.
var server = http.createServer(app);
var io = require('socket.io')(server);

let vetor = [] //variavel que armazena os dados criada fora do escopo

io.on('connection', function (socket) {
  console.log('a user connected');

  socket.on('chat message', async function (input) {

    // verifica se o app ja enviou todas as partes do vetor
    if (input != "fim") {
      input = JSON.parse(input);
      for (var i in input) {
        vetor.push(input[i]);
      }
      // se sim, começa a salvar no banco
    }
    else {

      try {

        for (i = 0; i < vetor.length; i++) {
          const x = vetor[i][0];
          const y = vetor[i][1];
          const z = vetor[i][2];
          const delay = vetor[i][3];
          const TimeStamp = vetor[i][4];

          //salva no banco
          const db = require("../db");
          const Dado = db.Mongoose.model('dados', db.MedicaoSchema, 'dados');
          const dado = Dado.create({ medicao: { x, y, z, delay, TimeStamp } });

        }

        

        vetor = [];

      } catch (erro) {
        console.log(erro);
      }

      // await dado.save();

      console.log('Ok! Todos os dados foram salvos'); //mensagem para console da aplicação
      //io.emit('display', 'Dados salvos'); //mensagem para socket




      // exemplo de resposta do servidor
      var MongoClient = require('mongodb').MongoClient;
      var url = process.env.MONGODB_URI;
      var media = require('../script');

      MongoClient.connect(url, function (err, db) {
        if (err) throw err;
        var dbo = db.db("chatdemo");

        dbo.collection("dados").find({}).toArray(function (err, result) {
          if (err) throw err;
          console.log(media(result));
          io.emit('display', media(result));
          db.close();
        });
      });





    }

    
  });

  socket.on('disconnect', function () {
    console.log('user disconnected');
  });
});



// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? ('Pipe ' + port) : ('Port ' + port);

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event.
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
